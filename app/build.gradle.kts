/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    java
    application
}

val javaFXModules = listOf(
    "base",
    "controls",
    "fxml",
    "swing",
    "graphics"
)

val supportedPlatforms = listOf("linux", "mac", "win", "mac-aarch64")

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    val javaFxVersion = "17.0.6"
    val os = System.getProperty("os.name").toLowerCase()
    val arch = System.getProperty("os.arch")

    val platform = when {
        os.contains("win") -> "win"
        os.contains("mac") && arch == "aarch64" -> "mac-aarch64"
        os.contains("mac") -> "mac"
        else -> "linux"
    }

    for (module in javaFXModules) {
        implementation("org.openjfx:javafx-$module:$javaFxVersion:$platform")
    }

    implementation("mysql:mysql-connector-java:8.0.28")

    // Used to load dotenv files
    implementation("io.github.cdimascio:dotenv-java:3.0.0")

    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:31.1-jre")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("azienda.App")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
